"""
Description of Company class
"""

from typing import Any, Optional, Union, List, Dict, Any
import requests
import uuid
import json
from datetime import datetime, timedelta

from pydantic import Json, HttpUrl, BaseModel

from WH_Utils.Objects.Enums import CompanyType
from WH_Utils.Objects.Object_utils import (
    verify_auth_header,
    minus_key,
    WH_DB_URL,
)


class Company(BaseModel):
    id: Optional[str]
    name: str
    coresignal_id: int
    linkedin_url: HttpUrl
    industry: str
    description: str
    location: str
    logo: Optional[HttpUrl]
    type: Optional[CompanyType] = CompanyType.PRIVATE
    website: HttpUrl
    created: Optional[datetime]
    last_modified: Optional[datetime]
    full_data: dict = {}
    in_database: bool = False

    class Config:
        arbitrary_types_allowed = True
        orm_mode = True

    def __repr__(self) -> str:
        return "CompanyID: {} \n Name: {}".format(self.id, self.name)

    def __str__(self) -> str:
        return "CompanyID: {} \n Name: {}".format(self.id, self.name)

    @staticmethod
    def from_db(WH_ID: str, auth_header: Dict[str, Any]):
        verify_auth_header(auth_header)
        request = requests.get(
            WH_DB_URL + "/company", params={"companyID": WH_ID}, headers=auth_header
        )
        content = request.json()
        c =  Company(**content)
        c.in_database = True
        return c

    def send_to_db(self, auth_header: Dict[str, Any]) -> requests.Response:
        """
        Sends the current object to the WH Database

        It will try to figure out if the object is already in the database by looking at the initialization
        method by looking at the `in_database` attribute. For example, if you constructed the object using
        WH_auth credentials and a WH_ID, then obviously the object is in the DB and so the function will
        attempt a PUT request to update the user. If 'in_database' is `False` then it will attempt a `POST`
        request. It's python so its mutable obviously so change it if needed.

        Args
        ------
            auth_header: Dict[str, Any]
                the authorization header for the WH database. It should be a dict with at least the key
                'Authorization' where the value is the key generated by logging in

        Returns
        ---------
            response: requests.Response
                the response of the backend API to your request. If it was a sucessful POST request it will look like:
                >>> exampleClient.send_to_db(WH_auth_dict).content.decode()
                Not expecting client in database. Attempting Post request.
                '{"id":"1fd84bd0-779d-4a10-8c71-e2cf008d23ed"}'

        """
        data = self.__dict__
        data = minus_key("in_database", data)
        url = WH_DB_URL + "/company"
        data["full_data"] = json.dumps(data["full_data"])
        data["created"] = None
        data["last_modified"] = None

        if self.in_database:
            response = requests.put(url, json=data, headers=auth_header)
        else:
            response = requests.post(url, json=data, headers=auth_header)

        if response.status_code != 200:
            raise ConnectionError(response.content.decode())

        return response
